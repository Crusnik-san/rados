#
# uncrustify config file for the linux kernel
#

code_width           = 80
#indent_with_tabs	= 2		# 1=indent to level only, 2=indent with tabs
#input_tab_size		= 8		# original tab size
#input_tab_size		= 8		# original tab size
output_tab_size		= 3		# new tab size
output_tab_size		= 3		# new tab size
indent_with_tabs	   = 0		# 1=indent to level only, 2=indent with tabs
indent_columns		   = output_tab_size

indent_label		   = 1		# pos: absolute col, neg: relative column


#
# inter-symbol newlines
#

nl_enum_brace		= remove	# "enum {" vs "enum \n {"
nl_union_brace		= remove	# "union {" vs "union \n {"
nl_struct_brace		= remove	# "struct {" vs "struct \n {"
nl_do_brace 		= remove	# "do {" vs "do \n {"
nl_if_brace 		= remove	# "if () {" vs "if () \n {"
nl_for_brace 		= remove	# "for () {" vs "for () \n {"
nl_else_brace 		= remove	# "else {" vs "else \n {"
nl_while_brace 		= remove	# "while () {" vs "while () \n {"
nl_switch_brace 	= remove	# "switch () {" vs "switch () \n {"
nl_brace_while		= remove	# "} while" vs "} \n while" - cuddle while
nl_brace_else		= remove	# "} else" vs "} \n else" - cuddle else
nl_func_var_def_blk	= 1
nl_fcall_brace		= remove	# "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace		= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return		= TRUE;
# nl_before_case	= 1
ls_func_split_full = true
ls_for_split_full = true

#
# Source code modifications
#

mod_paren_on_return	= remove	# "return 1;" vs "return (1);"
mod_full_brace_if	= remove	# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for	= remove	# "for () a--;" vs "for () { a--; }"
mod_full_brace_do	= remove	# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while	= remove	# "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_nl	= 2		# don't remove if more than 3 newlines


#
# inter-character spacing options
#

# sp_return_paren	= force		# "return (1);" vs "return(1);"
sp_sizeof_paren		= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen	= force		# "if (" vs "if("
sp_after_sparen		= force		# "if () {" vs "if (){"
sp_after_cast		= remove	# "(int) a" vs "(int)a"
sp_inside_braces	= add		# "{ 1 }" vs "{1}"
sp_inside_braces_struct	= add		# "{ 1 }" vs "{1}"
sp_inside_braces_enum	= add		# "{ 1 }" vs "{1}"
sp_assign		= add
sp_arith		= add
sp_bool			= add
sp_compare		= add
sp_assign		= add
sp_after_comma		= add
sp_func_def_paren	= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren	= remove	# "foo (" vs "foo("
sp_func_proto_paren	= remove	# "int foo ();" vs "int foo();"


#
# Aligning stuff
#

#align_with_tabs		= TRUE		# use tabs to align
align_with_tabs		= false		# use tabs to align
align_on_tabstop	= TRUE 		# align on tabstops
# align_keep_tabs		= true
align_enum_equ_span		= 4		# '=' in enum definition
# align_nl_cont		= TRUE
# align_var_def_span	= 2
# align_var_def_inline	= TRUE
# align_var_def_star	= FALSE
# align_var_def_colon	= TRUE
# align_assign_span	= 1
align_struct_init_span	= 3		# align stuff in a structure init '= { }'
align_right_cmt_span	= 3
# align_pp_define_span	= 8;
# align_pp_define_gap	= 4;

# cmt_star_cont		= FALSE

# indent_brace		= 0

# Custom settings for RadOs

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
indent_func_call_param                   = true    # true/true
indent_func_def_param                    = true    # true/true
indent_func_proto_param                  = true    # true/true
indent_func_class_param                  = true    # true/true
indent_func_ctor_var_param               = true    # true/true
indent_template_param                    = true    # true/true
indent_align_string                      = true

nl_func_decl_start = add
nl_func_def_start = add
nl_func_decl_start_single = remove
nl_func_def_start_single = remove
nl_func_decl_args = add
nl_func_def_args = add
nl_func_decl_end = remove
nl_func_def_end = remove
nl_func_decl_end_single = remove
nl_func_def_end_single = remove
nl_func_decl_empty = remove
nl_func_def_empty = remove

nl_if_leave_one_liners = false

pp_define_at_level = false

sp_before_ptr_star = add
sp_before_unnamed_ptr_star = remove #Add or remove space before pointer star '*' that isn't followed by a variable name. If set to 'ignore', sp_before_ptr_star is used instead.
sp_between_ptr_star = remove
sp_after_ptr_star = remove #Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star_func = remove #Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_before_ptr_star_func  = add #Add or remove space before a pointer star '*', if followed by a func proto/def

#Comments
nl_before_block_comment = 1
nl_before_cpp_comment = 1
cmt_width = 80
cmt_reflow_mode = 2 #full_reflow
cmt_c_nl_start = false
cmt_c_nl_end = false
cmt_cpp_group = false
cmt_star_cont = true #add stars to multiline cpp comment
#cmt_sp_before_star_cont = 1 
cmt_sp_after_star_cont = 1 #One space after start on following lines
#cmt_multi_check_last

#Braces
mod_full_brace_if_chain = true
mod_full_brace_nl = 2

